<?xml version="1.0" encoding="utf-8"?>
<ScriptDetails xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <QStep_Main>
    <UserScript>
      <CodeEvent>
        <CodeKey>UI</CodeKey>
        <Message xsi:type="LuaString" Value="QuestAreaAnnounceLog" />
        <SenderKey>ANY / ALL</SenderKey>
        <SenderValue xsi:type="LuaNil" />
      </CodeEvent>
      <Identifier Value="Arrive_Fade_To_Black" />
      <Description />
      <Preconditions>
        <Precondition>
          <Name>True Only Once Flag</Name>
          <Version>1.0</Version>
          <Category>FLAGS</Category>
          <Description>Combines the Check Flag precondition with a Set Flag operation on the same identifier. 
Checks whether a string identifier has been flagged. If not, this precondition will return true AND flag the identifier. 
Thus, this precondition will only be fulfilled once, unless the flag is manually unset.</Description>
          <EventFunctionTemplate>if not qvars.CommonFlagTable[|[1|STRING,NUMBER]|] then
  qvars.CommonFlagTable[|[1|STRING,NUMBER]|] = true
  return true
end
return false</EventFunctionTemplate>
          <EmbeddedChoosableValueSets />
          <Choices>
            <Choice>
              <Name>Flag Name</Name>
              <Description>A flag ID value. Any string or number can be used as a flag identifier, even if it is being used for some other purpose, like a UI notification.</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>Variable</Key>
              <Value xsi:type="LuaTableIdentifier" TableVariable="qvars">
                <TableKeyPath>
                  <Key xsi:type="LuaString" Value="Player_Warp_Flag" />
                </TableKeyPath>
                <EvaluatesTo>STRING</EvaluatesTo>
              </Value>
            </Choice>
          </Choices>
          <EmbeddedCommonDefinitions>
            <qvarsDefinition Extrude="false">
              <Key xsi:type="LuaString" Value="CommonFlagTable" />
              <Value xsi:type="LuaTable">
                <Entries />
              </Value>
            </qvarsDefinition>
          </EmbeddedCommonDefinitions>
        </Precondition>
      </Preconditions>
      <Operations>
        <Operation>
          <Name>Fade Out To Black</Name>
          <Version>1.0</Version>
          <Category>USER INTERFACE</Category>
          <Description>The screen fades to black, as though a cutscene or a loading screen begins.</Description>
          <EventFunctionTemplate>local tempExceptGameStatus = {
  exceptGameStatus = {
    AnnounceLog=false --[[allows for remaining notifs to display during fade-out]]
  }
}
TppUI.FadeOut(|[2|NUMBER]|, |[1|STRING]|, nil, tempExceptGameStatus)</EventFunctionTemplate>
          <EmbeddedChoosableValueSets />
          <Choices>
            <Choice>
              <Name>Sender</Name>
              <Description>When the fade out is completed, a "EndFadeOut" message is sent. This value will be the name of the sender.</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>String Literal</Key>
              <Value xsi:type="LuaString" Value="WarpFadeOut" />
            </Choice>
            <Choice>
              <Name>Fade-Out Time (Seconds)</Name>
              <Description>The amount of time in seconds before the screen is completely faded out.</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>Number Literal</Key>
              <Value xsi:type="LuaNumber" Value="1.5" />
            </Choice>
          </Choices>
          <EmbeddedCommonDefinitions />
        </Operation>
      </Operations>
    </UserScript>
    <UserScript>
      <CodeEvent>
        <CodeKey>UI</CodeKey>
        <Message xsi:type="LuaString" Value="EndFadeOut" />
        <SenderKey>String Literal</SenderKey>
        <SenderValue xsi:type="LuaString" Value="WarpFadeOut" />
      </CodeEvent>
      <Identifier Value="Warp_Player_To_Location" />
      <Description />
      <Preconditions />
      <Operations>
        <Operation>
          <Name>Start Hidden Timer</Name>
          <Version>1.0</Version>
          <Category>TIMERS</Category>
          <Description>Begins a background countdown that sends a Timer -&gt; "Start" and Timer -&gt; "Finish" event.
This can be used for chaining events together on a delay, or creating a delayed event loop.
The name of the timer is the sender of the event.</Description>
          <EventFunctionTemplate>if GkEventTimerManager.IsTimerActive(|[1|STRING]|) then
  GkEventTimerManager.Stop(|[1|STRING]|)
end
GkEventTimerManager.Start(|[1|STRING]|, |[2|NUMBER]|)</EventFunctionTemplate>
          <EmbeddedChoosableValueSets />
          <Choices>
            <Choice>
              <Name>Sender</Name>
              <Description>The name of the timer. 
When the timer is finished, an event will occur. 
You can catch that event By creating a new script with a "Timer" StrCode, "Finish" message, and this value as the "Sender".</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>String Literal</Key>
              <Value xsi:type="LuaString" Value="WarpLoadBuffer_Timer" />
            </Choice>
            <Choice>
              <Name>Duration (Seconds)</Name>
              <Description>The number of seconds that the timer will count to before triggering the "Finish" event.</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>Number Literal</Key>
              <Value xsi:type="LuaNumber" Value="2" />
            </Choice>
          </Choices>
          <EmbeddedCommonDefinitions />
        </Operation>
        <Operation>
          <Name>Warp</Name>
          <Version>1.0</Version>
          <Category>ROUTES AND POSITIONS</Category>
          <Description>Immediately and unceremoniously teleports the target to a new position. 
Compatible with the player character, prisoners and vehicles.

- For most events, 'arg1' represents the GameObjectId that sent the event. For GeoTraps, 'arg2' is the GameObjectId that entered/exited.
- The embedded Warp function was yoinked from Infinite Heaven</Description>
          <EventFunctionTemplate>local tempGameObjectIdVal = |[1|STRING,NUMBER]|
if type(tempGameObjectIdVal) == "string" then
  tempGameObjectIdVal = GetGameObjectId(tempGameObjectIdVal)
end
qvars.Warp(tempGameObjectIdVal, |[2|TABLE]|)</EventFunctionTemplate>
          <EmbeddedChoosableValueSets />
          <Choices>
            <Choice>
              <Name>Game Object</Name>
              <Description>The character or vehicle to be warped.</Description>
              <ChoosableValueSetsFilter>
                <Key>Event Default Arguments</Key>
                <Key>Prisoner Names (Targets)</Key>
                <Key>Prisoner Names</Key>
                <Key>Walker Gear Names (Targets)</Key>
                <Key>Walker Gear Names</Key>
                <Key>Heavy Vehicle Names (Targets)</Key>
                <Key>Heavy Vehicle Names</Key>
              </ChoosableValueSetsFilter>
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>String Literal</Key>
              <Value xsi:type="LuaString" Value="Player" />
            </Choice>
            <Choice>
              <Name>X, Y, Z, rotY Table</Name>
              <Description>A table that contains 3 numbers for X, Y, Z coordinates, and an optional 4th number for degree rotation.</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>Variable</Key>
              <Value xsi:type="LuaTableIdentifier" TableVariable="qvars">
                <TableKeyPath>
                  <Key xsi:type="LuaString" Value="Player_Warp_Location (X, Y, Z, RotY)" />
                </TableKeyPath>
                <EvaluatesTo>TABLE</EvaluatesTo>
              </Value>
            </Choice>
          </Choices>
          <EmbeddedCommonDefinitions>
            <qvarsDefinition Extrude="false">
              <Key xsi:type="LuaString" Value="Warp" />
              <Value xsi:type="LuaFunction">
                <Parameters>
                  <Parameter Value="gameId" />
                  <Parameter Value="pos" />
                  <Parameter Value="rotY" />
                </Parameters>
                <Template>rotY=rotY or pos[4] or 0
  local typeIndex=GameObject.GetTypeIndex(gameId)   
  if typeIndex==TppGameObject.GAME_OBJECT_TYPE_PLAYER2 then
    rotY=foxmath.NormalizeRadian(foxmath.DegreeToRadian(rotY))
    local command={id="WarpAndWaitBlock",pos=pos,rotY=rotY}
    GameObject.SendCommand(gameId,command)
  elseif typeIndex==TppGameObject.GAME_OBJECT_TYPE_VEHICLE then
    pos=Vector3(pos[1],pos[2],pos[3])
    rotY=foxmath.NormalizeRadian(foxmath.DegreeToRadian(rotY))
    GameObject.SendCommand(gameId,{id="SetPosition",position=pos,rotY=rotY})
  elseif typeIndex==TppGameObject.GAME_OBJECT_TYPE_WALKERGEAR2 or typeIndex==TppGameObject.GAME_OBJECT_TYPE_COMMON_WALKERGEAR2 then
    rotY=foxmath.NormalizeRadian(foxmath.DegreeToRadian(rotY))
    GameObject.SendCommand(gameId,{id="SetPosition",pos=pos,rotY=rotY})
  elseif TppDefine.HOSTAGE_GM_TYPE[typeIndex] then
    pos=Vector3(pos[1],pos[2],pos[3])
    GameObject.SendCommand(gameId,{id="Warp",degRotationY=rotY,position=pos})
  end</Template>
                <PopulationValues />
              </Value>
            </qvarsDefinition>
          </EmbeddedCommonDefinitions>
        </Operation>
      </Operations>
    </UserScript>
    <UserScript>
      <CodeEvent>
        <CodeKey>Timer</CodeKey>
        <Message xsi:type="LuaString" Value="Finish" />
        <SenderKey>String Literal</SenderKey>
        <SenderValue xsi:type="LuaString" Value="WarpLoadBuffer_Timer" />
      </CodeEvent>
      <Identifier Value="Warp_Fade_In" />
      <Description />
      <Preconditions />
      <Operations>
        <Operation>
          <Name>Fade In From Black</Name>
          <Version>1.0</Version>
          <Category>USER INTERFACE</Category>
          <Description>The screen fades back in, as though a cutscene or a loading screen ended.</Description>
          <EventFunctionTemplate>local tempExceptGameStatus = {
  exceptGameStatus = {
    AnnounceLog=nil
  }
}
TppUI.FadeIn(|[2|NUMBER]|, |[1|STRING]|, nil, tempExceptGameStatus)</EventFunctionTemplate>
          <EmbeddedChoosableValueSets />
          <Choices>
            <Choice>
              <Name>Sender</Name>
              <Description>When the fade in is completed, a "EndFadeIn" message is sent. This value will be the name of the sender.</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>String Literal</Key>
              <Value xsi:type="LuaString" Value="FadeSenderUnused" />
            </Choice>
            <Choice>
              <Name>Fade-In Time (Seconds)</Name>
              <Description>The amount of time in seconds before the screen is completely faded back in.</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>Number Literal</Key>
              <Value xsi:type="LuaNumber" Value="1.5" />
            </Choice>
          </Choices>
          <EmbeddedCommonDefinitions />
        </Operation>
      </Operations>
    </UserScript>
  </QStep_Main>
  <Variables>
    <UserVariable Extrude="false">
      <Key xsi:type="LuaString" Value="Player_Warp_Flag" />
      <Value xsi:type="LuaString" Value="Player_Warp" />
    </UserVariable>
    <UserVariable Extrude="false">
      <Key xsi:type="LuaString" Value="Player_Warp_Location (X, Y, Z, RotY)" />
      <Value xsi:type="LuaTable">
        <Entries>
          <Entry Extrude="false">
            <Key xsi:type="LuaNumber" Value="1" />
            <Value xsi:type="LuaNumber" Value="2461.597" />
          </Entry>
          <Entry Extrude="false">
            <Key xsi:type="LuaNumber" Value="2" />
            <Value xsi:type="LuaNumber" Value="117.514" />
          </Entry>
          <Entry Extrude="false">
            <Key xsi:type="LuaNumber" Value="3" />
            <Value xsi:type="LuaNumber" Value="-942.855" />
          </Entry>
          <Entry Extrude="false">
            <Key xsi:type="LuaNumber" Value="4" />
            <Value xsi:type="LuaNumber" Value="83.736" />
          </Entry>
        </Entries>
      </Value>
    </UserVariable>
  </Variables>
</ScriptDetails>
<?xml version="1.0" encoding="utf-8"?>
<ScriptDetails xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <QStep_Main>
    <UserScript>
      <CodeEvent>
        <CodeKey>Trap</CodeKey>
        <Message xsi:type="LuaString" Value="Enter" />
        <SenderKey>GeoTrap Names</SenderKey>
        <SenderValue xsi:type="LuaString" Value="GeoTrap_0" />
      </CodeEvent>
      <Identifier Value="Enter_Bath" />
      <Description />
      <Preconditions />
      <Operations>
        <Operation>
          <Name>Set Flag</Name>
          <Version>1.0</Version>
          <Category>FLAGS</Category>
          <Description>Flags an identifier. If the identifier is already flagged, this does nothing.</Description>
          <EventFunctionTemplate>qvars.CommonFlagTable[|[1|STRING,NUMBER]|] = true</EventFunctionTemplate>
          <EmbeddedChoosableValueSets />
          <Choices>
            <Choice>
              <Name>Flag Name</Name>
              <Description>A flag ID value. Any string or number can be used as a flag identifier, even if it is being used for some other purpose, like a UI notification.</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>Variable</Key>
              <Value xsi:type="LuaTableIdentifier" TableVariable="qvars">
                <TableKeyPath>
                  <Key xsi:type="LuaString" Value="Wash_Area_Flag" />
                </TableKeyPath>
                <EvaluatesTo>STRING</EvaluatesTo>
              </Value>
            </Choice>
          </Choices>
          <EmbeddedCommonDefinitions>
            <qvarsDefinition Extrude="false">
              <Key xsi:type="LuaString" Value="CommonFlagTable" />
              <Value xsi:type="LuaTable">
                <Entries />
              </Value>
            </qvarsDefinition>
          </EmbeddedCommonDefinitions>
        </Operation>
      </Operations>
    </UserScript>
    <UserScript>
      <CodeEvent>
        <CodeKey>Trap</CodeKey>
        <Message xsi:type="LuaString" Value="Enter" />
        <SenderKey>GeoTrap Names</SenderKey>
        <SenderValue xsi:type="LuaString" Value="GeoTrap_0" />
      </CodeEvent>
      <Identifier Value="Enter_Bath_Init_Timer" />
      <Description />
      <Preconditions>
        <Precondition>
          <Name>Check Hidden Timer</Name>
          <Version>1.0</Version>
          <Category>TIMERS</Category>
          <Description>Checks whether or not a background timer is ticking.</Description>
          <EventFunctionTemplate>return GkEventTimerManager.IsTimerActive(|[1|STRING]|) == |[2|BOOLEAN]|</EventFunctionTemplate>
          <EmbeddedChoosableValueSets />
          <Choices>
            <Choice>
              <Name>Sender</Name>
              <Description>The name of the timer.</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>String Literal</Key>
              <Value xsi:type="LuaString" Value="NotifCooldown" />
            </Choice>
            <Choice>
              <Name>Is Already Active</Name>
              <Description>Set to true to check if the timer is running. Set to false to check if the timer is not running.</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>false</AllowUserVariable>
              <Key>Boolean Literal</Key>
              <Value xsi:type="LuaBoolean" Value="false" />
            </Choice>
          </Choices>
          <EmbeddedCommonDefinitions />
        </Precondition>
      </Preconditions>
      <Operations>
        <Operation>
          <Name>Unset Flag</Name>
          <Version>1.0</Version>
          <Category>FLAGS</Category>
          <Description>Unflags an identifier. If the identifier is not flagged yet, this does nothing.</Description>
          <EventFunctionTemplate>qvars.CommonFlagTable[|[1|STRING,NUMBER]|] = nil</EventFunctionTemplate>
          <EmbeddedChoosableValueSets />
          <Choices>
            <Choice>
              <Name>Flag Name</Name>
              <Description>A flag ID value. Any string or number can be used as a flag identifier, even if it is being used for some other purpose, like a UI notification.</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>Variable</Key>
              <Value xsi:type="LuaTableIdentifier" TableVariable="qvars">
                <TableKeyPath>
                  <Key xsi:type="LuaString" Value="Wash_Flag" />
                </TableKeyPath>
                <EvaluatesTo>STRING</EvaluatesTo>
              </Value>
            </Choice>
          </Choices>
          <EmbeddedCommonDefinitions>
            <qvarsDefinition Extrude="false">
              <Key xsi:type="LuaString" Value="CommonFlagTable" />
              <Value xsi:type="LuaTable">
                <Entries />
              </Value>
            </qvarsDefinition>
          </EmbeddedCommonDefinitions>
        </Operation>
        <Operation>
          <Name>Print Notification</Name>
          <Version>1.0</Version>
          <Category>USER INTERFACE</Category>
          <Description>Prints up to 5 strings and or numbers as an in-game notification.</Description>
          <EventFunctionTemplate>InfCore.DebugPrint(|[1|STRING,NUMBER]| .. |[2|STRING,NUMBER]| .. |[3|STRING,NUMBER]| .. |[4|STRING,NUMBER]| .. |[5|STRING,NUMBER]|)</EventFunctionTemplate>
          <EmbeddedChoosableValueSets>
            <KeyValuesSet Key="Example Strings">
              <Value xsi:type="LuaString" Value="Foo" />
              <Value xsi:type="LuaString" Value="Bar" />
            </KeyValuesSet>
          </EmbeddedChoosableValueSets>
          <Choices>
            <Choice>
              <Name>Value 1</Name>
              <Description>1st Text that will print to notifications</Description>
              <ChoosableValueSetsFilter>
                <Key>Example Strings</Key>
                <Key>Event Default Arguments</Key>
              </ChoosableValueSetsFilter>
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>Variable</Key>
              <Value xsi:type="LuaTableIdentifier" TableVariable="qvars">
                <TableKeyPath>
                  <Key xsi:type="LuaString" Value="Enter_Bath_Notification" />
                </TableKeyPath>
                <EvaluatesTo>STRING</EvaluatesTo>
              </Value>
            </Choice>
            <Choice>
              <Name>Value 2</Name>
              <Description>2nd Text that will print to notifications</Description>
              <ChoosableValueSetsFilter>
                <Key>Example Strings</Key>
                <Key>Event Default Arguments</Key>
              </ChoosableValueSetsFilter>
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>String Literal</Key>
              <Value xsi:type="LuaString" Value="" />
            </Choice>
            <Choice>
              <Name>Value 3</Name>
              <Description>3rd Text that will print to notifications</Description>
              <ChoosableValueSetsFilter>
                <Key>Example Strings</Key>
                <Key>Event Default Arguments</Key>
              </ChoosableValueSetsFilter>
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>String Literal</Key>
              <Value xsi:type="LuaString" Value="" />
            </Choice>
            <Choice>
              <Name>Value 4</Name>
              <Description>4th Text that will print to notifications</Description>
              <ChoosableValueSetsFilter>
                <Key>Example Strings</Key>
                <Key>Event Default Arguments</Key>
              </ChoosableValueSetsFilter>
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>String Literal</Key>
              <Value xsi:type="LuaString" Value="" />
            </Choice>
            <Choice>
              <Name>Value 5</Name>
              <Description>5th Text that will print to notifications</Description>
              <ChoosableValueSetsFilter>
                <Key>Example Strings</Key>
                <Key>Event Default Arguments</Key>
              </ChoosableValueSetsFilter>
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>String Literal</Key>
              <Value xsi:type="LuaString" Value="" />
            </Choice>
          </Choices>
          <EmbeddedCommonDefinitions />
        </Operation>
        <Operation>
          <Name>Start Hidden Timer</Name>
          <Version>1.0</Version>
          <Category>TIMERS</Category>
          <Description>Begins a background countdown that sends a Timer -&gt; "Start" and Timer -&gt; "Finish" event.
This can be used for chaining events together on a delay, or creating a delayed event loop.
The name of the timer is the sender of the event.</Description>
          <EventFunctionTemplate>if GkEventTimerManager.IsTimerActive(|[1|STRING]|) then
  GkEventTimerManager.Stop(|[1|STRING]|)
end
GkEventTimerManager.Start(|[1|STRING]|, |[2|NUMBER]|)</EventFunctionTemplate>
          <EmbeddedChoosableValueSets />
          <Choices>
            <Choice>
              <Name>Sender</Name>
              <Description>The name of the timer. 
When the timer is finished, an event will occur. 
You can catch that event By creating a new script with a "Timer" StrCode, "Finish" message, and this value as the "Sender".</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>String Literal</Key>
              <Value xsi:type="LuaString" Value="NotifCooldown" />
            </Choice>
            <Choice>
              <Name>Duration (Seconds)</Name>
              <Description>The number of seconds that the timer will count to before triggering the "Finish" event.</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>Number Literal</Key>
              <Value xsi:type="LuaNumber" Value="300" />
            </Choice>
          </Choices>
          <EmbeddedCommonDefinitions />
        </Operation>
      </Operations>
    </UserScript>
    <UserScript>
      <CodeEvent>
        <CodeKey>Trap</CodeKey>
        <Message xsi:type="LuaString" Value="Exit" />
        <SenderKey>GeoTrap Names</SenderKey>
        <SenderValue xsi:type="LuaString" Value="GeoTrap_0" />
      </CodeEvent>
      <Identifier Value="Exit_Bath" />
      <Description />
      <Preconditions />
      <Operations>
        <Operation>
          <Name>Unset Flag</Name>
          <Version>1.0</Version>
          <Category>FLAGS</Category>
          <Description>Unflags an identifier. If the identifier is not flagged yet, this does nothing.</Description>
          <EventFunctionTemplate>qvars.CommonFlagTable[|[1|STRING,NUMBER]|] = nil</EventFunctionTemplate>
          <EmbeddedChoosableValueSets />
          <Choices>
            <Choice>
              <Name>Flag Name</Name>
              <Description>A flag ID value. Any string or number can be used as a flag identifier, even if it is being used for some other purpose, like a UI notification.</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>Variable</Key>
              <Value xsi:type="LuaTableIdentifier" TableVariable="qvars">
                <TableKeyPath>
                  <Key xsi:type="LuaString" Value="Wash_Area_Flag" />
                </TableKeyPath>
                <EvaluatesTo>STRING</EvaluatesTo>
              </Value>
            </Choice>
          </Choices>
          <EmbeddedCommonDefinitions>
            <qvarsDefinition Extrude="false">
              <Key xsi:type="LuaString" Value="CommonFlagTable" />
              <Value xsi:type="LuaTable">
                <Entries />
              </Value>
            </qvarsDefinition>
          </EmbeddedCommonDefinitions>
        </Operation>
      </Operations>
    </UserScript>
    <UserScript>
      <CodeEvent>
        <CodeKey>Player</CodeKey>
        <Message xsi:type="LuaString" Value="IconCrawlStealthShown" />
        <SenderKey>ANY / ALL</SenderKey>
        <SenderValue xsi:type="LuaNil" />
      </CodeEvent>
      <Identifier Value="Start_Bath_Fade_Out" />
      <Description />
      <Preconditions>
        <Precondition>
          <Name>Check Flag</Name>
          <Version>1.0</Version>
          <Category>FLAGS</Category>
          <Description>Checks whether a string identifier has been flagged or not.</Description>
          <EventFunctionTemplate>local tempFlagCheck = qvars.CommonFlagTable[|[1|STRING,NUMBER]|]
if |[2|BOOLEAN]| then
  return tempFlagCheck == true
else
  return tempFlagCheck == nil
end</EventFunctionTemplate>
          <EmbeddedChoosableValueSets />
          <Choices>
            <Choice>
              <Name>Flag Name</Name>
              <Description>A flag ID value. Any string or number can be used as a flag identifier, even if it is being used for some other purpose, like a UI notification.</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>Variable</Key>
              <Value xsi:type="LuaTableIdentifier" TableVariable="qvars">
                <TableKeyPath>
                  <Key xsi:type="LuaString" Value="Wash_Area_Flag" />
                </TableKeyPath>
                <EvaluatesTo>STRING</EvaluatesTo>
              </Value>
            </Choice>
            <Choice>
              <Name>Is Set</Name>
              <Description>Set to true to check if the identifier has already been flagged. Set to false to check if the flag identifier has not been set yet.</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>false</AllowUserVariable>
              <Key>Boolean Literal</Key>
              <Value xsi:type="LuaBoolean" Value="true" />
            </Choice>
          </Choices>
          <EmbeddedCommonDefinitions>
            <qvarsDefinition Extrude="false">
              <Key xsi:type="LuaString" Value="CommonFlagTable" />
              <Value xsi:type="LuaTable">
                <Entries />
              </Value>
            </qvarsDefinition>
          </EmbeddedCommonDefinitions>
        </Precondition>
        <Precondition>
          <Name>True Only Once Flag</Name>
          <Version>1.0</Version>
          <Category>FLAGS</Category>
          <Description>Combines the Check Flag precondition with a Set Flag operation on the same identifier. 
Checks whether a string identifier has been flagged. If not, this precondition will return true AND flag the identifier. 
Thus, this precondition will only be fulfilled once, unless the flag is manually unset.</Description>
          <EventFunctionTemplate>if not qvars.CommonFlagTable[|[1|STRING,NUMBER]|] then
  qvars.CommonFlagTable[|[1|STRING,NUMBER]|] = true
  return true
end
return false</EventFunctionTemplate>
          <EmbeddedChoosableValueSets />
          <Choices>
            <Choice>
              <Name>Flag Name</Name>
              <Description>A flag ID value. Any string or number can be used as a flag identifier, even if it is being used for some other purpose, like a UI notification.</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>Variable</Key>
              <Value xsi:type="LuaTableIdentifier" TableVariable="qvars">
                <TableKeyPath>
                  <Key xsi:type="LuaString" Value="Wash_Flag" />
                </TableKeyPath>
                <EvaluatesTo>STRING</EvaluatesTo>
              </Value>
            </Choice>
          </Choices>
          <EmbeddedCommonDefinitions>
            <qvarsDefinition Extrude="false">
              <Key xsi:type="LuaString" Value="CommonFlagTable" />
              <Value xsi:type="LuaTable">
                <Entries />
              </Value>
            </qvarsDefinition>
          </EmbeddedCommonDefinitions>
        </Precondition>
      </Preconditions>
      <Operations>
        <Operation>
          <Name>Fade Out To Black</Name>
          <Version>1.0</Version>
          <Category>USER INTERFACE</Category>
          <Description>The screen fades to black, as though a cutscene or a loading screen begins.</Description>
          <EventFunctionTemplate>local tempExceptGameStatus = {
  exceptGameStatus = {
    AnnounceLog=false --[[allows for remaining notifs to display during fade-out]]
  }
}
TppUI.FadeOut(|[2|NUMBER]|, |[1|STRING]|, nil, tempExceptGameStatus)</EventFunctionTemplate>
          <EmbeddedChoosableValueSets />
          <Choices>
            <Choice>
              <Name>Sender</Name>
              <Description>When the fade out is completed, a "EndFadeOut" message is sent. This value will be the name of the sender.</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>String Literal</Key>
              <Value xsi:type="LuaString" Value="BathFadeToBlack" />
            </Choice>
            <Choice>
              <Name>Fade-Out Time (Seconds)</Name>
              <Description>The amount of time in seconds before the screen is completely faded out.</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>Number Literal</Key>
              <Value xsi:type="LuaNumber" Value="1.5" />
            </Choice>
          </Choices>
          <EmbeddedCommonDefinitions />
        </Operation>
      </Operations>
    </UserScript>
    <UserScript>
      <CodeEvent>
        <CodeKey>UI</CodeKey>
        <Message xsi:type="LuaString" Value="EndFadeOut" />
        <SenderKey>String Literal</SenderKey>
        <SenderValue xsi:type="LuaString" Value="BathFadeToBlack" />
      </CodeEvent>
      <Identifier Value="End_Bath_Fade_In" />
      <Description />
      <Preconditions />
      <Operations>
        <Operation>
          <Name>Wash Player</Name>
          <Version>1.0</Version>
          <Category>GAMEPLAY EFFECTS</Category>
          <Description>Immediately washes the player. Resets blood, bugs (for 3 in-game days) and soot effects.
Logic pulled from my Provisional Showers mod.</Description>
          <EventFunctionTemplate>Player.SetWetEffect()
Player.ResetDirtyEffect()
vars.passageSecondsSinceOutMB = 259200
TppUiCommand.AnnounceLogView("Partially Physically and Mentally Refreshed")</EventFunctionTemplate>
          <EmbeddedChoosableValueSets />
          <Choices />
          <EmbeddedCommonDefinitions />
        </Operation>
        <Operation>
          <Name>Fade In From Black</Name>
          <Version>1.0</Version>
          <Category>USER INTERFACE</Category>
          <Description>The screen fades back in, as though a cutscene or a loading screen ended.</Description>
          <EventFunctionTemplate>local tempExceptGameStatus = {
  exceptGameStatus = {
    AnnounceLog=nil
  }
}
TppUI.FadeIn(|[2|NUMBER]|, |[1|STRING]|, nil, tempExceptGameStatus)</EventFunctionTemplate>
          <EmbeddedChoosableValueSets />
          <Choices>
            <Choice>
              <Name>Sender</Name>
              <Description>When the fade in is completed, a "EndFadeIn" message is sent. This value will be the name of the sender.</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>String Literal</Key>
              <Value xsi:type="LuaString" Value="FadeSenderUnused" />
            </Choice>
            <Choice>
              <Name>Fade-In Time (Seconds)</Name>
              <Description>The amount of time in seconds before the screen is completely faded back in.</Description>
              <ChoosableValueSetsFilter />
              <AllowUIEdit>true</AllowUIEdit>
              <AllowLiteral>true</AllowLiteral>
              <AllowUserVariable>true</AllowUserVariable>
              <Key>Number Literal</Key>
              <Value xsi:type="LuaNumber" Value="1.5" />
            </Choice>
          </Choices>
          <EmbeddedCommonDefinitions />
        </Operation>
      </Operations>
    </UserScript>
  </QStep_Main>
  <Variables>
    <UserVariable Extrude="false">
      <Key xsi:type="LuaString" Value="Wash_Area_Flag" />
      <Value xsi:type="LuaString" Value="Wash_Area" />
    </UserVariable>
    <UserVariable Extrude="false">
      <Key xsi:type="LuaString" Value="Wash_Flag" />
      <Value xsi:type="LuaString" Value="Wash" />
    </UserVariable>
    <UserVariable Extrude="false">
      <Key xsi:type="LuaString" Value="Enter_Bath_Notification" />
      <Value xsi:type="LuaString" Value="The water here is cool and refreshing..." />
    </UserVariable>
  </Variables>
</ScriptDetails>